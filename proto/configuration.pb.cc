// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configuration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "configuration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Beta {

namespace {

const ::google::protobuf::Descriptor* ConfigurationProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_configuration_2eproto() {
  protobuf_AddDesc_configuration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "configuration.proto");
  GOOGLE_CHECK(file != NULL);
  ConfigurationProto_descriptor_ = file->message_type(0);
  static const int ConfigurationProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, max_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, num_trees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, min_entropy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, context_patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, dim_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, num_keypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, num_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, file_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, neg_file_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, minimum_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, save_path_),
  };
  ConfigurationProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationProto_descriptor_,
      ConfigurationProto::default_instance_,
      ConfigurationProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationProto));
  StateProto_descriptor_ = file->message_type(1);
  static const int StateProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, x0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, y0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, xc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, yc_),
  };
  StateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateProto_descriptor_,
      StateProto::default_instance_,
      StateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateProto));
  PointProto_descriptor_ = file->message_type(2);
  static const int PointProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointProto, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointProto, y_),
  };
  PointProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointProto_descriptor_,
      PointProto::default_instance_,
      PointProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointProto));
  StatisticProto_descriptor_ = file->message_type(3);
  static const int StatisticProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticProto, cls_statistic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticProto, reg_statistic_),
  };
  StatisticProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticProto_descriptor_,
      StatisticProto::default_instance_,
      StatisticProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticProto));
  NodeProto_descriptor_ = file->message_type(4);
  static const int NodeProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, child_),
  };
  NodeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeProto_descriptor_,
      NodeProto::default_instance_,
      NodeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeProto));
  TreeProto_descriptor_ = file->message_type(5);
  static const int TreeProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, counter_),
  };
  TreeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeProto_descriptor_,
      TreeProto::default_instance_,
      TreeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_configuration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationProto_descriptor_, &ConfigurationProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateProto_descriptor_, &StateProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointProto_descriptor_, &PointProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticProto_descriptor_, &StatisticProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeProto_descriptor_, &NodeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeProto_descriptor_, &TreeProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_configuration_2eproto() {
  delete ConfigurationProto::default_instance_;
  delete ConfigurationProto_reflection_;
  delete ConfigurationProto::_default_file_list_;
  delete ConfigurationProto::_default_save_path_;
  delete StateProto::default_instance_;
  delete StateProto_reflection_;
  delete PointProto::default_instance_;
  delete PointProto_reflection_;
  delete StatisticProto::default_instance_;
  delete StatisticProto_reflection_;
  delete NodeProto::default_instance_;
  delete NodeProto_reflection_;
  delete TreeProto::default_instance_;
  delete TreeProto_reflection_;
}

void protobuf_AddDesc_configuration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023configuration.proto\022\004Beta\"\375\002\n\022Configur"
    "ationProto\022\024\n\tmax_depth\030\001 \002(\005:\0015\022\024\n\tnum_"
    "trees\030\002 \002(\005:\0013\022\017\n\004mode\030\003 \002(\005:\0012\022\031\n\013min_e"
    "ntropy\030\004 \002(\002:\0040.01\022\022\n\006height\030\005 \002(\005:\00264\022\021"
    "\n\005width\030\006 \002(\005:\00264\022\031\n\rcontext_patch\030\007 \002(\005"
    ":\00250\022\031\n\014dim_features\030\010 \002(\005:\003100\022\031\n\rnum_k"
    "eypoints\030\t \002(\005:\00210\022\026\n\013num_classes\030\n \002(\005:"
    "\0012\022\034\n\tfile_list\030\013 \002(\t:\ttrain.txt\022\016\n\004path"
    "\030\014 \002(\t:\000\022\027\n\rneg_file_list\030\r \002(\t:\000\022\033\n\017min"
    "imum_samples\030\016 \002(\005:\00210\022\033\n\tsave_path\030\017 \002("
    "\t:\010tree.txt\"t\n\nStateProto\022\r\n\002x0\030\001 \002(\005:\0010"
    "\022\r\n\002y0\030\002 \002(\005:\0010\022\r\n\002x1\030\003 \002(\005:\0010\022\r\n\002y1\030\004 \002"
    "(\005:\0010\022\014\n\001t\030\005 \002(\002:\0010\022\r\n\002xc\030\006 \002(\005:\0010\022\r\n\002yc"
    "\030\007 \002(\005:\0010\"\"\n\nPointProto\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030"
    "\002 \002(\002\"P\n\016StatisticProto\022\025\n\rcls_statistic"
    "\030\001 \003(\002\022\'\n\rreg_statistic\030\002 \003(\0132\020.Beta.Poi"
    "ntProto\"_\n\tNodeProto\022\037\n\005state\030\001 \002(\0132\020.Be"
    "ta.StateProto\022\020\n\005depth\030\002 \002(\005:\0010\022\020\n\005index"
    "\030\003 \002(\004:\0011\022\r\n\005child\030\004 \003(\005\"<\n\tTreeProto\022\036\n"
    "\005nodes\030\001 \003(\0132\017.Beta.NodeProto\022\017\n\007counter"
    "\030\002 \002(\004", 806);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "configuration.proto", &protobuf_RegisterTypes);
  ConfigurationProto::_default_file_list_ =
      new ::std::string("train.txt", 9);
  ConfigurationProto::_default_save_path_ =
      new ::std::string("tree.txt", 8);
  ConfigurationProto::default_instance_ = new ConfigurationProto();
  StateProto::default_instance_ = new StateProto();
  PointProto::default_instance_ = new PointProto();
  StatisticProto::default_instance_ = new StatisticProto();
  NodeProto::default_instance_ = new NodeProto();
  TreeProto::default_instance_ = new TreeProto();
  ConfigurationProto::default_instance_->InitAsDefaultInstance();
  StateProto::default_instance_->InitAsDefaultInstance();
  PointProto::default_instance_->InitAsDefaultInstance();
  StatisticProto::default_instance_->InitAsDefaultInstance();
  NodeProto::default_instance_->InitAsDefaultInstance();
  TreeProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_configuration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_configuration_2eproto {
  StaticDescriptorInitializer_configuration_2eproto() {
    protobuf_AddDesc_configuration_2eproto();
  }
} static_descriptor_initializer_configuration_2eproto_;

// ===================================================================

::std::string* ConfigurationProto::_default_file_list_ = NULL;
::std::string* ConfigurationProto::_default_save_path_ = NULL;
#ifndef _MSC_VER
const int ConfigurationProto::kMaxDepthFieldNumber;
const int ConfigurationProto::kNumTreesFieldNumber;
const int ConfigurationProto::kModeFieldNumber;
const int ConfigurationProto::kMinEntropyFieldNumber;
const int ConfigurationProto::kHeightFieldNumber;
const int ConfigurationProto::kWidthFieldNumber;
const int ConfigurationProto::kContextPatchFieldNumber;
const int ConfigurationProto::kDimFeaturesFieldNumber;
const int ConfigurationProto::kNumKeypointsFieldNumber;
const int ConfigurationProto::kNumClassesFieldNumber;
const int ConfigurationProto::kFileListFieldNumber;
const int ConfigurationProto::kPathFieldNumber;
const int ConfigurationProto::kNegFileListFieldNumber;
const int ConfigurationProto::kMinimumSamplesFieldNumber;
const int ConfigurationProto::kSavePathFieldNumber;
#endif  // !_MSC_VER

ConfigurationProto::ConfigurationProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beta.ConfigurationProto)
}

void ConfigurationProto::InitAsDefaultInstance() {
}

ConfigurationProto::ConfigurationProto(const ConfigurationProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Beta.ConfigurationProto)
}

void ConfigurationProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_depth_ = 5;
  num_trees_ = 3;
  mode_ = 2;
  min_entropy_ = 0.01f;
  height_ = 64;
  width_ = 64;
  context_patch_ = 50;
  dim_features_ = 100;
  num_keypoints_ = 10;
  num_classes_ = 2;
  file_list_ = const_cast< ::std::string*>(_default_file_list_);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neg_file_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minimum_samples_ = 10;
  save_path_ = const_cast< ::std::string*>(_default_save_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationProto::~ConfigurationProto() {
  // @@protoc_insertion_point(destructor:Beta.ConfigurationProto)
  SharedDtor();
}

void ConfigurationProto::SharedDtor() {
  if (file_list_ != _default_file_list_) {
    delete file_list_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (neg_file_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete neg_file_list_;
  }
  if (save_path_ != _default_save_path_) {
    delete save_path_;
  }
  if (this != default_instance_) {
  }
}

void ConfigurationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationProto_descriptor_;
}

const ConfigurationProto& ConfigurationProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configuration_2eproto();
  return *default_instance_;
}

ConfigurationProto* ConfigurationProto::default_instance_ = NULL;

ConfigurationProto* ConfigurationProto::New() const {
  return new ConfigurationProto;
}

void ConfigurationProto::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    max_depth_ = 5;
    num_trees_ = 3;
    mode_ = 2;
    min_entropy_ = 0.01f;
    height_ = 64;
    width_ = 64;
    context_patch_ = 50;
    dim_features_ = 100;
  }
  if (_has_bits_[8 / 32] & 32512) {
    num_keypoints_ = 10;
    num_classes_ = 2;
    if (has_file_list()) {
      if (file_list_ != _default_file_list_) {
        file_list_->assign(*_default_file_list_);
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_neg_file_list()) {
      if (neg_file_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        neg_file_list_->clear();
      }
    }
    minimum_samples_ = 10;
    if (has_save_path()) {
      if (save_path_ != _default_save_path_) {
        save_path_->assign(*_default_save_path_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beta.ConfigurationProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 max_depth = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_depth_)));
          set_has_max_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_trees;
        break;
      }

      // required int32 num_trees = 2 [default = 3];
      case 2: {
        if (tag == 16) {
         parse_num_trees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_trees_)));
          set_has_num_trees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // required int32 mode = 3 [default = 2];
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_min_entropy;
        break;
      }

      // required float min_entropy = 4 [default = 0.01];
      case 4: {
        if (tag == 37) {
         parse_min_entropy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_entropy_)));
          set_has_min_entropy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // required int32 height = 5 [default = 64];
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_width;
        break;
      }

      // required int32 width = 6 [default = 64];
      case 6: {
        if (tag == 48) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_context_patch;
        break;
      }

      // required int32 context_patch = 7 [default = 50];
      case 7: {
        if (tag == 56) {
         parse_context_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_patch_)));
          set_has_context_patch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dim_features;
        break;
      }

      // required int32 dim_features = 8 [default = 100];
      case 8: {
        if (tag == 64) {
         parse_dim_features:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dim_features_)));
          set_has_dim_features();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_keypoints;
        break;
      }

      // required int32 num_keypoints = 9 [default = 10];
      case 9: {
        if (tag == 72) {
         parse_num_keypoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_keypoints_)));
          set_has_num_keypoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num_classes;
        break;
      }

      // required int32 num_classes = 10 [default = 2];
      case 10: {
        if (tag == 80) {
         parse_num_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
          set_has_num_classes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_file_list;
        break;
      }

      // required string file_list = 11 [default = "train.txt"];
      case 11: {
        if (tag == 90) {
         parse_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_list().data(), this->file_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_path;
        break;
      }

      // required string path = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_neg_file_list;
        break;
      }

      // required string neg_file_list = 13 [default = ""];
      case 13: {
        if (tag == 106) {
         parse_neg_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg_file_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->neg_file_list().data(), this->neg_file_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "neg_file_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_minimum_samples;
        break;
      }

      // required int32 minimum_samples = 14 [default = 10];
      case 14: {
        if (tag == 112) {
         parse_minimum_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_samples_)));
          set_has_minimum_samples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_save_path;
        break;
      }

      // required string save_path = 15 [default = "tree.txt"];
      case 15: {
        if (tag == 122) {
         parse_save_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_path().data(), this->save_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "save_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beta.ConfigurationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beta.ConfigurationProto)
  return false;
#undef DO_
}

void ConfigurationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beta.ConfigurationProto)
  // required int32 max_depth = 1 [default = 5];
  if (has_max_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_depth(), output);
  }

  // required int32 num_trees = 2 [default = 3];
  if (has_num_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_trees(), output);
  }

  // required int32 mode = 3 [default = 2];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // required float min_entropy = 4 [default = 0.01];
  if (has_min_entropy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_entropy(), output);
  }

  // required int32 height = 5 [default = 64];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // required int32 width = 6 [default = 64];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // required int32 context_patch = 7 [default = 50];
  if (has_context_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->context_patch(), output);
  }

  // required int32 dim_features = 8 [default = 100];
  if (has_dim_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dim_features(), output);
  }

  // required int32 num_keypoints = 9 [default = 10];
  if (has_num_keypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_keypoints(), output);
  }

  // required int32 num_classes = 10 [default = 2];
  if (has_num_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_classes(), output);
  }

  // required string file_list = 11 [default = "train.txt"];
  if (has_file_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_list().data(), this->file_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->file_list(), output);
  }

  // required string path = 12 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->path(), output);
  }

  // required string neg_file_list = 13 [default = ""];
  if (has_neg_file_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->neg_file_list().data(), this->neg_file_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "neg_file_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->neg_file_list(), output);
  }

  // required int32 minimum_samples = 14 [default = 10];
  if (has_minimum_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->minimum_samples(), output);
  }

  // required string save_path = 15 [default = "tree.txt"];
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "save_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->save_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Beta.ConfigurationProto)
}

::google::protobuf::uint8* ConfigurationProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Beta.ConfigurationProto)
  // required int32 max_depth = 1 [default = 5];
  if (has_max_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_depth(), target);
  }

  // required int32 num_trees = 2 [default = 3];
  if (has_num_trees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_trees(), target);
  }

  // required int32 mode = 3 [default = 2];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  // required float min_entropy = 4 [default = 0.01];
  if (has_min_entropy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_entropy(), target);
  }

  // required int32 height = 5 [default = 64];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // required int32 width = 6 [default = 64];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // required int32 context_patch = 7 [default = 50];
  if (has_context_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->context_patch(), target);
  }

  // required int32 dim_features = 8 [default = 100];
  if (has_dim_features()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dim_features(), target);
  }

  // required int32 num_keypoints = 9 [default = 10];
  if (has_num_keypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_keypoints(), target);
  }

  // required int32 num_classes = 10 [default = 2];
  if (has_num_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_classes(), target);
  }

  // required string file_list = 11 [default = "train.txt"];
  if (has_file_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_list().data(), this->file_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->file_list(), target);
  }

  // required string path = 12 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->path(), target);
  }

  // required string neg_file_list = 13 [default = ""];
  if (has_neg_file_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->neg_file_list().data(), this->neg_file_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "neg_file_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->neg_file_list(), target);
  }

  // required int32 minimum_samples = 14 [default = 10];
  if (has_minimum_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->minimum_samples(), target);
  }

  // required string save_path = 15 [default = "tree.txt"];
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "save_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->save_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Beta.ConfigurationProto)
  return target;
}

int ConfigurationProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 max_depth = 1 [default = 5];
    if (has_max_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_depth());
    }

    // required int32 num_trees = 2 [default = 3];
    if (has_num_trees()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_trees());
    }

    // required int32 mode = 3 [default = 2];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // required float min_entropy = 4 [default = 0.01];
    if (has_min_entropy()) {
      total_size += 1 + 4;
    }

    // required int32 height = 5 [default = 64];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 width = 6 [default = 64];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 context_patch = 7 [default = 50];
    if (has_context_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_patch());
    }

    // required int32 dim_features = 8 [default = 100];
    if (has_dim_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dim_features());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 num_keypoints = 9 [default = 10];
    if (has_num_keypoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_keypoints());
    }

    // required int32 num_classes = 10 [default = 2];
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // required string file_list = 11 [default = "train.txt"];
    if (has_file_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_list());
    }

    // required string path = 12 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string neg_file_list = 13 [default = ""];
    if (has_neg_file_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->neg_file_list());
    }

    // required int32 minimum_samples = 14 [default = 10];
    if (has_minimum_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minimum_samples());
    }

    // required string save_path = 15 [default = "tree.txt"];
    if (has_save_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationProto::MergeFrom(const ConfigurationProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_depth()) {
      set_max_depth(from.max_depth());
    }
    if (from.has_num_trees()) {
      set_num_trees(from.num_trees());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_min_entropy()) {
      set_min_entropy(from.min_entropy());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_context_patch()) {
      set_context_patch(from.context_patch());
    }
    if (from.has_dim_features()) {
      set_dim_features(from.dim_features());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_keypoints()) {
      set_num_keypoints(from.num_keypoints());
    }
    if (from.has_num_classes()) {
      set_num_classes(from.num_classes());
    }
    if (from.has_file_list()) {
      set_file_list(from.file_list());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_neg_file_list()) {
      set_neg_file_list(from.neg_file_list());
    }
    if (from.has_minimum_samples()) {
      set_minimum_samples(from.minimum_samples());
    }
    if (from.has_save_path()) {
      set_save_path(from.save_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationProto::CopyFrom(const ConfigurationProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void ConfigurationProto::Swap(ConfigurationProto* other) {
  if (other != this) {
    std::swap(max_depth_, other->max_depth_);
    std::swap(num_trees_, other->num_trees_);
    std::swap(mode_, other->mode_);
    std::swap(min_entropy_, other->min_entropy_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(context_patch_, other->context_patch_);
    std::swap(dim_features_, other->dim_features_);
    std::swap(num_keypoints_, other->num_keypoints_);
    std::swap(num_classes_, other->num_classes_);
    std::swap(file_list_, other->file_list_);
    std::swap(path_, other->path_);
    std::swap(neg_file_list_, other->neg_file_list_);
    std::swap(minimum_samples_, other->minimum_samples_);
    std::swap(save_path_, other->save_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationProto_descriptor_;
  metadata.reflection = ConfigurationProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateProto::kX0FieldNumber;
const int StateProto::kY0FieldNumber;
const int StateProto::kX1FieldNumber;
const int StateProto::kY1FieldNumber;
const int StateProto::kTFieldNumber;
const int StateProto::kXcFieldNumber;
const int StateProto::kYcFieldNumber;
#endif  // !_MSC_VER

StateProto::StateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beta.StateProto)
}

void StateProto::InitAsDefaultInstance() {
}

StateProto::StateProto(const StateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Beta.StateProto)
}

void StateProto::SharedCtor() {
  _cached_size_ = 0;
  x0_ = 0;
  y0_ = 0;
  x1_ = 0;
  y1_ = 0;
  t_ = 0;
  xc_ = 0;
  yc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateProto::~StateProto() {
  // @@protoc_insertion_point(destructor:Beta.StateProto)
  SharedDtor();
}

void StateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateProto_descriptor_;
}

const StateProto& StateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configuration_2eproto();
  return *default_instance_;
}

StateProto* StateProto::default_instance_ = NULL;

StateProto* StateProto::New() const {
  return new StateProto;
}

void StateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(x0_, yc_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beta.StateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x0 = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x0_)));
          set_has_x0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y0;
        break;
      }

      // required int32 y0 = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_y0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y0_)));
          set_has_y0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x1;
        break;
      }

      // required int32 x1 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_x1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y1;
        break;
      }

      // required int32 y1 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_t;
        break;
      }

      // required float t = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_xc;
        break;
      }

      // required int32 xc = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_xc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xc_)));
          set_has_xc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_yc;
        break;
      }

      // required int32 yc = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_yc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yc_)));
          set_has_yc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beta.StateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beta.StateProto)
  return false;
#undef DO_
}

void StateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beta.StateProto)
  // required int32 x0 = 1 [default = 0];
  if (has_x0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x0(), output);
  }

  // required int32 y0 = 2 [default = 0];
  if (has_y0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y0(), output);
  }

  // required int32 x1 = 3 [default = 0];
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x1(), output);
  }

  // required int32 y1 = 4 [default = 0];
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y1(), output);
  }

  // required float t = 5 [default = 0];
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->t(), output);
  }

  // required int32 xc = 6 [default = 0];
  if (has_xc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xc(), output);
  }

  // required int32 yc = 7 [default = 0];
  if (has_yc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->yc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Beta.StateProto)
}

::google::protobuf::uint8* StateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Beta.StateProto)
  // required int32 x0 = 1 [default = 0];
  if (has_x0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x0(), target);
  }

  // required int32 y0 = 2 [default = 0];
  if (has_y0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y0(), target);
  }

  // required int32 x1 = 3 [default = 0];
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x1(), target);
  }

  // required int32 y1 = 4 [default = 0];
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y1(), target);
  }

  // required float t = 5 [default = 0];
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->t(), target);
  }

  // required int32 xc = 6 [default = 0];
  if (has_xc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xc(), target);
  }

  // required int32 yc = 7 [default = 0];
  if (has_yc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->yc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Beta.StateProto)
  return target;
}

int StateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x0 = 1 [default = 0];
    if (has_x0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x0());
    }

    // required int32 y0 = 2 [default = 0];
    if (has_y0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y0());
    }

    // required int32 x1 = 3 [default = 0];
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x1());
    }

    // required int32 y1 = 4 [default = 0];
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y1());
    }

    // required float t = 5 [default = 0];
    if (has_t()) {
      total_size += 1 + 4;
    }

    // required int32 xc = 6 [default = 0];
    if (has_xc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xc());
    }

    // required int32 yc = 7 [default = 0];
    if (has_yc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateProto::MergeFrom(const StateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x0()) {
      set_x0(from.x0());
    }
    if (from.has_y0()) {
      set_y0(from.y0());
    }
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_xc()) {
      set_xc(from.xc());
    }
    if (from.has_yc()) {
      set_yc(from.yc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateProto::CopyFrom(const StateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void StateProto::Swap(StateProto* other) {
  if (other != this) {
    std::swap(x0_, other->x0_);
    std::swap(y0_, other->y0_);
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(t_, other->t_);
    std::swap(xc_, other->xc_);
    std::swap(yc_, other->yc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateProto_descriptor_;
  metadata.reflection = StateProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointProto::kXFieldNumber;
const int PointProto::kYFieldNumber;
#endif  // !_MSC_VER

PointProto::PointProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beta.PointProto)
}

void PointProto::InitAsDefaultInstance() {
}

PointProto::PointProto(const PointProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Beta.PointProto)
}

void PointProto::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointProto::~PointProto() {
  // @@protoc_insertion_point(destructor:Beta.PointProto)
  SharedDtor();
}

void PointProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointProto_descriptor_;
}

const PointProto& PointProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configuration_2eproto();
  return *default_instance_;
}

PointProto* PointProto::default_instance_ = NULL;

PointProto* PointProto::New() const {
  return new PointProto;
}

void PointProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beta.PointProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beta.PointProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beta.PointProto)
  return false;
#undef DO_
}

void PointProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beta.PointProto)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Beta.PointProto)
}

::google::protobuf::uint8* PointProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Beta.PointProto)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Beta.PointProto)
  return target;
}

int PointProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointProto::MergeFrom(const PointProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointProto::CopyFrom(const PointProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointProto::Swap(PointProto* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointProto_descriptor_;
  metadata.reflection = PointProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticProto::kClsStatisticFieldNumber;
const int StatisticProto::kRegStatisticFieldNumber;
#endif  // !_MSC_VER

StatisticProto::StatisticProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beta.StatisticProto)
}

void StatisticProto::InitAsDefaultInstance() {
}

StatisticProto::StatisticProto(const StatisticProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Beta.StatisticProto)
}

void StatisticProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticProto::~StatisticProto() {
  // @@protoc_insertion_point(destructor:Beta.StatisticProto)
  SharedDtor();
}

void StatisticProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticProto_descriptor_;
}

const StatisticProto& StatisticProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configuration_2eproto();
  return *default_instance_;
}

StatisticProto* StatisticProto::default_instance_ = NULL;

StatisticProto* StatisticProto::New() const {
  return new StatisticProto;
}

void StatisticProto::Clear() {
  cls_statistic_.Clear();
  reg_statistic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beta.StatisticProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float cls_statistic = 1;
      case 1: {
        if (tag == 13) {
         parse_cls_statistic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_cls_statistic())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cls_statistic())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_cls_statistic;
        if (input->ExpectTag(18)) goto parse_reg_statistic;
        break;
      }

      // repeated .Beta.PointProto reg_statistic = 2;
      case 2: {
        if (tag == 18) {
         parse_reg_statistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reg_statistic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reg_statistic;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beta.StatisticProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beta.StatisticProto)
  return false;
#undef DO_
}

void StatisticProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beta.StatisticProto)
  // repeated float cls_statistic = 1;
  for (int i = 0; i < this->cls_statistic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->cls_statistic(i), output);
  }

  // repeated .Beta.PointProto reg_statistic = 2;
  for (int i = 0; i < this->reg_statistic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reg_statistic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Beta.StatisticProto)
}

::google::protobuf::uint8* StatisticProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Beta.StatisticProto)
  // repeated float cls_statistic = 1;
  for (int i = 0; i < this->cls_statistic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->cls_statistic(i), target);
  }

  // repeated .Beta.PointProto reg_statistic = 2;
  for (int i = 0; i < this->reg_statistic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reg_statistic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Beta.StatisticProto)
  return target;
}

int StatisticProto::ByteSize() const {
  int total_size = 0;

  // repeated float cls_statistic = 1;
  {
    int data_size = 0;
    data_size = 4 * this->cls_statistic_size();
    total_size += 1 * this->cls_statistic_size() + data_size;
  }

  // repeated .Beta.PointProto reg_statistic = 2;
  total_size += 1 * this->reg_statistic_size();
  for (int i = 0; i < this->reg_statistic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reg_statistic(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticProto::MergeFrom(const StatisticProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  cls_statistic_.MergeFrom(from.cls_statistic_);
  reg_statistic_.MergeFrom(from.reg_statistic_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticProto::CopyFrom(const StatisticProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->reg_statistic())) return false;
  return true;
}

void StatisticProto::Swap(StatisticProto* other) {
  if (other != this) {
    cls_statistic_.Swap(&other->cls_statistic_);
    reg_statistic_.Swap(&other->reg_statistic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticProto_descriptor_;
  metadata.reflection = StatisticProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeProto::kStateFieldNumber;
const int NodeProto::kDepthFieldNumber;
const int NodeProto::kIndexFieldNumber;
const int NodeProto::kChildFieldNumber;
#endif  // !_MSC_VER

NodeProto::NodeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beta.NodeProto)
}

void NodeProto::InitAsDefaultInstance() {
  state_ = const_cast< ::Beta::StateProto*>(&::Beta::StateProto::default_instance());
}

NodeProto::NodeProto(const NodeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Beta.NodeProto)
}

void NodeProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  depth_ = 0;
  index_ = GOOGLE_ULONGLONG(1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeProto::~NodeProto() {
  // @@protoc_insertion_point(destructor:Beta.NodeProto)
  SharedDtor();
}

void NodeProto::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void NodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeProto_descriptor_;
}

const NodeProto& NodeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configuration_2eproto();
  return *default_instance_;
}

NodeProto* NodeProto::default_instance_ = NULL;

NodeProto* NodeProto::New() const {
  return new NodeProto;
}

void NodeProto::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_state()) {
      if (state_ != NULL) state_->::Beta::StateProto::Clear();
    }
    depth_ = 0;
    index_ = GOOGLE_ULONGLONG(1);
  }
  child_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beta.NodeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Beta.StateProto state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_depth;
        break;
      }

      // required int32 depth = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required uint64 index = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_child;
        break;
      }

      // repeated int32 child = 4;
      case 4: {
        if (tag == 32) {
         parse_child:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_child())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_child())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_child;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beta.NodeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beta.NodeProto)
  return false;
#undef DO_
}

void NodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beta.NodeProto)
  // required .Beta.StateProto state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // required int32 depth = 2 [default = 0];
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->depth(), output);
  }

  // required uint64 index = 3 [default = 1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index(), output);
  }

  // repeated int32 child = 4;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->child(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Beta.NodeProto)
}

::google::protobuf::uint8* NodeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Beta.NodeProto)
  // required .Beta.StateProto state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // required int32 depth = 2 [default = 0];
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->depth(), target);
  }

  // required uint64 index = 3 [default = 1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index(), target);
  }

  // repeated int32 child = 4;
  for (int i = 0; i < this->child_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->child(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Beta.NodeProto)
  return target;
}

int NodeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Beta.StateProto state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // required int32 depth = 2 [default = 0];
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // required uint64 index = 3 [default = 1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

  }
  // repeated int32 child = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->child_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->child(i));
    }
    total_size += 1 * this->child_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeProto::MergeFrom(const NodeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_.MergeFrom(from.child_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::Beta::StateProto::MergeFrom(from.state());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeProto::CopyFrom(const NodeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void NodeProto::Swap(NodeProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(depth_, other->depth_);
    std::swap(index_, other->index_);
    child_.Swap(&other->child_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeProto_descriptor_;
  metadata.reflection = NodeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeProto::kNodesFieldNumber;
const int TreeProto::kCounterFieldNumber;
#endif  // !_MSC_VER

TreeProto::TreeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beta.TreeProto)
}

void TreeProto::InitAsDefaultInstance() {
}

TreeProto::TreeProto(const TreeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Beta.TreeProto)
}

void TreeProto::SharedCtor() {
  _cached_size_ = 0;
  counter_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeProto::~TreeProto() {
  // @@protoc_insertion_point(destructor:Beta.TreeProto)
  SharedDtor();
}

void TreeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeProto_descriptor_;
}

const TreeProto& TreeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configuration_2eproto();
  return *default_instance_;
}

TreeProto* TreeProto::default_instance_ = NULL;

TreeProto* TreeProto::New() const {
  return new TreeProto;
}

void TreeProto::Clear() {
  counter_ = GOOGLE_ULONGLONG(0);
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beta.TreeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Beta.NodeProto nodes = 1;
      case 1: {
        if (tag == 10) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectTag(16)) goto parse_counter;
        break;
      }

      // required uint64 counter = 2;
      case 2: {
        if (tag == 16) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beta.TreeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beta.TreeProto)
  return false;
#undef DO_
}

void TreeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beta.TreeProto)
  // repeated .Beta.NodeProto nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // required uint64 counter = 2;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Beta.TreeProto)
}

::google::protobuf::uint8* TreeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Beta.TreeProto)
  // repeated .Beta.NodeProto nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  // required uint64 counter = 2;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Beta.TreeProto)
  return target;
}

int TreeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 counter = 2;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->counter());
    }

  }
  // repeated .Beta.NodeProto nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeProto::MergeFrom(const TreeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_counter()) {
      set_counter(from.counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeProto::CopyFrom(const TreeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  return true;
}

void TreeProto::Swap(TreeProto* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(counter_, other->counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeProto_descriptor_;
  metadata.reflection = TreeProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Beta

// @@protoc_insertion_point(global_scope)
